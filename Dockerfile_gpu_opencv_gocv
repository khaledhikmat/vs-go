# ---------- BASE IMAGE ----------
FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04 AS opencv-gocv-base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git cmake unzip wget curl build-essential pkg-config \
    libgtk-3-dev libavcodec-dev libavformat-dev libswscale-dev \
    libjpeg-dev libpng-dev libtiff-dev libopenexr-dev libgdal-dev \
    libomp-dev && \
    rm -rf /var/lib/apt/lists/*

# Clone OpenCV + contrib
WORKDIR /opt
RUN git clone https://github.com/opencv/opencv.git && \
    git clone https://github.com/opencv/opencv_contrib.git
WORKDIR /opt/opencv
RUN git checkout 4.8.0 && cd ../opencv_contrib && git checkout 4.8.0

# Build OpenCV with CUDA
RUN mkdir build && cd build && \
    cmake -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
          -D WITH_CUDA=ON \
          -D WITH_CUDNN=ON \
          -D OPENCV_DNN_CUDA=ON \
          -D BUILD_opencv_python3=OFF \
          -D BUILD_EXAMPLES=OFF \
          -D BUILD_TESTS=OFF \
          -D BUILD_PERF_TESTS=OFF \
          -D ENABLE_FAST_MATH=1 \
          -D CUDA_FAST_MATH=1 \
          -D WITH_CUBLAS=1 \
          -D BUILD_opencv_world=ON \
          .. > cmake_configure.log 2>&1 || \
    (cat cmake_configure.log && exit 1) && \
    make -j"$(nproc)" && make install && ldconfig

# Build GoCV (C bindings only, no Go build)
WORKDIR /opt
RUN git clone https://github.com/hybridgroup/gocv.git && \
    sed -i 's/sudo //g' gocv/Makefile && \
    cd gocv && make install

# DONE: push this image to Docker Hub as:
# yourdockerhub/opencv-cuda-gocv:4.8.0-cuda11.8
